#!/usr/bin/perl
# Find/filter log lines using comma separated list hostnames or IP addresses
#
# 2023-03-17  dargel(at)uwplatt.edu  Created

use strict;

# Parse command options
use Getopt::Long;
my %opts=();
my $invert;
my $process;
Getopt::Long::Configure qw(bundling);
GetOptions(\%opts,
  "f",
  "k",
  "v" => \$invert,
  "process=s" => \$process, 
  "help|usage|?" => \&usage) or usage();

usage() if (!$ARGV[0]);
my @searchkeys = split(',', shift @ARGV);

$ARGV[0] = '-' if (!$ARGV[0]);  # Stdio if no input file

# Subroutine to print usage
sub usage {
  print <<EOT;
Usage: $0 [OPTIONS] [IP|hostname,...] [FILE...]
Find/filter log lines using comma separated list hostnames or IP addresses
  [FILE]  Log files may be specified on the command line or records may be
          piped in.  Files ending in ".gz", ".bz", or ".bz2" will be
          decompressed when read.  Use -l -c0 to output raw records.
  -f                       Output records added to file in real time (follow)
                             Uses: tail -f [FILE] | $0
  -k                       Output Grep keys used to search.
  -v                       Invert matching to hosts not listed.
  --process=[procname,...] List of processes to filter by.
  -?, --help, --usage      Outputs program usage.
EOT
  exit;
}


#-------------------------------------------------------------------------------
# Mainline

# Build search keys of each format
my @grepkeys;
foreach (@searchkeys) {
  # IP address
  if (m/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/ && ($1<=255  && $2<=255 && $3<=255  && $4<=255)) {
    push(@grepkeys, '^' . $1 . '\.' . $2 . '\.' . $3 . '\.' . $4 . '$');

  # all other keys
  } else {
    push(@grepkeys, '^' . $_ . '(\.|$)');
  }
}

# Build search keys for process field
my @processkeys;
foreach (split(',',$process)) {
  push(@processkeys, '(^|/)' . $_ . '(\[|:|$)');
}

# Display Grep keys
if ($opts{k}) {
  print "Grep keys:\n";
  print "  ", $_, "\n" foreach (@grepkeys);
  if ($process) {
    print "Process keys:\n";
    print "  ", $_, "\n" foreach (@processkeys);
  }
  print "\n";
}

# Parse each input fine
parse_file($_) foreach (@ARGV);

exit;

#-------------------------------------------------------------------------------
# Parse the contents of a file
sub parse_file {
  my($inf) = @_;

  # Check if compressed and open file
  $inf =~ s/(.*\.gz)$/zcat $1|/;
  $inf =~ s/(.*\.bz)$/bzcat $1|/;
  $inf =~ s/(.*\.bz2)$/bzcat $1|/;
  $inf = "tail -0f $inf |" if ($opts{f});  # follow file
  open(INF, $inf) or die "can't open $inf: $!";

  # Parse records of the file
  while (<INF>) {
    parse_log_line($_);
  }
  close INF or die "bad stat: $! $?";
}

#-------------------------------------------------------------------------------
sub parse_log_line
{
  # Grab the line we were given
  my($line) = @_;

  foreach (@grepkeys) {
    $line =~ /^\w+ [ 0-3]\d [ 0-2]\d:[0-5]\d:[0-6]\d (\S+) (\S+)\h/;
    my $proc = $2;
    if ($1 =~ /$_/i xor $invert) {
      if ($process) {
        foreach (@processkeys) { 
          if ($proc =~ /$_/i xor $invert) {
            print $line;
            return;
          }
        }
      } else {
        print $line;
        return;
      }
    }
  }
}
